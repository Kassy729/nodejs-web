1. 노드 시작하기

자바스크립트 이해 : http://ko.javascript.info/

1.1 핵심 개념 이해하기
# NodeJs 정의 :
    크롬 v8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임
    Runtime - 실행시간

    자바스크립트 실행환경
    자바로 비유하자면 JVM, .NET프레임워크

1.1.1 서버
서버: 네트워크를 통해 클라이언트에 정보나 
      서비스를 제공하는 컴퓨터 또는 프로그램

클라이언트: 사용자 PC, 모바일기기, TOT장비
            서버에 서비스를 요청하는 컴퓨터 또는 프로그램
            웹브라우저

            웹

Server
Client
Request
Response

1.1.2 자바스크립트 런타임 : 자바스크립트 실행환경, 실행기
libuv : 논블록킹 I/O, 이벤트 기반처리
v8 : 자바스크립트 엔진(해석기)

# 노드의 특징
이벤트 기반
논 블로킹 I/O
1.1.5 싱글스레드


1.1.3 이벤트 기반
Event-driven

1) Event : 클릭, 키보드입력, 화면 변화 등
   컴퓨터에서 발생되는 시스템의 변화
   Event - Event Listener
           CallBack --> 함수로 구현, 콜백함수
   * 이벤트 루프(Event Loop) : 이벤트 발생 시 호출할 콜백 함수들을 관리, 호출된 
      콜백 함수의 실행 순서를 결정하는 역할을 담당

   * 호출 스택(call stack)
   stack - LIFO(Last In First Out)
   queue - FIFO(First In First Out)

   * Global Context
   <-> Local Context
   Context : 함수 실행시 사용가능한 환경 (메모리 정보, 변수)

   *setTimeout -> 콜백이해
   밀리초후에 등록한 함수(콜백함수)를 실행시킴

   - 이벤트 루프 : 이벤트 발생시 호출 할 콜백함수들을 관리
                  콜백함수의 실행 순서를 결정
   - 백그라운드 : 타이머, 이벤트 리스너가 대기
                 여러 작업이 동시에 실행될 수 있다.
   - 테스크 큐 : 이벤트 발생후, 백그라운드에서 테스크큐로 타이머나 
                이벤트 리스너를 전성, 큐의 순서대로 실행
   
1. 노드 시작하기

자바스크립트 이해 : http://ko.javascript.info/

1.1 핵심 개념 이해하기
# NodeJs 정의 :
    크롬 v8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임
    Runtime - 실행시간

    자바스크립트 실행환경
    자바로 비유하자면 JVM, .NET프레임워크

1.1.1 서버
서버: 네트워크를 통해 클라이언트에 정보나 
      서비스를 제공하는 컴퓨터 또는 프로그램

클라이언트: 사용자 PC, 모바일기기, TOT장비
            서버에 서비스를 요청하는 컴퓨터 또는 프로그램
            웹브라우저

            웹

Server
Client
Request
Response

1.1.2 자바스크립트 런타임 : 자바스크립트 실행환경, 실행기
libuv : 논블록킹 I/O, 이벤트 기반처리
v8 : 자바스크립트 엔진(해석기)

# 노드의 특징
이벤트 기반
논 블로킹 I/O
1.1.5 싱글스레드


1.1.3 이벤트 기반
Event-driven

1) Event : 클릭, 키보드입력, 화면 변화 등
   컴퓨터에서 발생되는 시스템의 변화
   Event - Event Listener
           CallBack --> 함수로 구현, 콜백함수
   * 이벤트 루프(Event Loop) : 이벤트 발생 시 호출할 콜백 함수들을 관리, 호출된 
      콜백 함수의 실행 순서를 결정하는 역할을 담당

   * 호출 스택(call stack)
   stack - LIFO(Last In First Out)
   queue - FIFO(First In First Out)

   * Global Context
   <-> Local Context
   Context : 함수 실행시 사용가능한 환경 (메모리 정보, 변수)

   *setTimeout -> 콜백이해
   밀리초후에 등록한 함수(콜백함수)를 실행시킴

   - 이벤트 루프 : 이벤트 발생시 호출 할 콜백함수들을 관리
                  콜백함수의 실행 순서를 결정
   - 백그라운드 : 타이머, 이벤트 리스너가 대기
                 여러 작업이 동시에 실행될 수 있다.
   - 테스크 큐 : 이벤트 발생후, 백그라운드에서 테스크큐로 타이머나 
                이벤트 리스너를 전성, 큐의 순서대로 실행

   1.1.4 논 블로킹 I/O

   * 논 블로킹 : 비동기 (non blocking : asynchronous)
   * 블로킹 : 동기 (blocking : synchronous)
   * 비동기
   * 동기 

   
    * 컴퓨터에서 제일 많이 시간이 걸리는 동작?
    I/O 작업 
    I/O 작업이 가장 많이 걸린다
    다른사람의 대기하는 시간을 줄이기 위해 

    블로킹 방식의 코드
    function longRunningTask(){
       //오래 걸리는 작업
       console.log('작업 끝');
    }
    console.log('시작');
    longRunningTask();
    console.log('다음 작업'); //(작업끝 출력되기 전까지는 오랜기간 실행 안됨)

    논블로킹 방식의 코드
    function longRunningTask(){
       //오래 걸리는 작업
       console.log('작업 끝');
    }
    console.log('시작');
    setTimeout(longRunningTask, 0);
    //setTimeout(콜백, 0) - 논 블로킹으로 만들기 위해 사용하는 기법 중 하나(set.console.log('다음작업'))

    Q) 다음의 실행순서를 적어라 (블로킹/논블로킹 숙지)

    블로킹
    논블로킹 시간을 줄이기 위해 사용, 동시작업가능

    블로킹/논블로킹은 호출되는 함수가 바로 리턴하느냐 마느냐가 관심사
    동기와 비동기는 호출되는 함수의 작업완료 여부를  누가 신경쓰냐가 관심사


-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------


    1.1.5 싱글 스레드
    * process vs. thread
    process는 하드디스크에 실행파일이 메인메모리에 올라가 실행이되는 상황 (로딩된 실행파일)
    이것이 여러개 있으면 멀티Processing이라 한다

    프로세스내에 하나의 작업을 스레드라고 한다
    그 스레드가 여러개인것을 멀티 스레드라고 한다

    스레드는 스레드 끼리 메모리를 공유

    node의 실행파일 : node.exe
    node에서 사용자(프로그래머)가 사용할 수 있는 스레드는 하나

    node 12버전 이후에는 멀티스레드 가능하게 됨

    *용어만 학습 (심화단계)
    멀티스레드
        스레드풀
        메인쓰레드
        워커쓰레드


-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

1.2 서버로서의 노드
서버 : I/O많이 일어남, 효율적 방법 모색 필요
노드 서버 : 싱글스레드, 논블록킹 --> 장단점은 싱글스레드, 논블록킹과 같다
장점1: 하나의 스레드 많은 I/O 대응 (I/O : 횟수는 많고, 데이터량이 적음)
      실시간채팅, 주식사이트, JSON 데이터제공 API 서버


노드는 서버는 아니지만 서버를 구성 할 수있는 모듈을 제공
그렇기 때문에 많이 사용한다














