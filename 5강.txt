5. 패키지매니저
npm (Node Package Menager) 사용법

5.1 npm 알아보기
--> 대체 관리툴 존재: yarn
npm 노드진영의 디폴트 패키지 관리자
yarn facebook사의 패키지 관리자

5.2 Package.json: 패키지 관리 파일
개발된 서비스에 필요한 패키지 정보를 저장
* 노드 프로젝트 시작전에 폴더 내부에 무조건
package.json을 작성 해야 함

* package.json 작성하기
- 콘솔에서 npm init 입력
  npm init -y

* 필요한 패키지 설치하기
- npm install 패키지명 [--save]
  npm install express
  npm install morgan cookie-parser express-session
  npm install -D nodemon

* package.json이 존재할 경우
내 프로젝트 실행시 
npm install 명령어 입력
npm i 명령어 입력

* 전역설치 : package.json 에 기록되지 않는다.
npm i --global rimraf
npm i -g rimraf

리눅스 rm -rf 명령어를 한 기능을 구현한 rimraf 패키지
설치

rimraf node_modules

* 전역설치를 꺼려 함:
npm 1 -D rimraf : 개발용 패키지 패키지로 정의
npx rimraf node_modules 
execute

5.3 패키지 버전 이해하기 : SemVer 방식으로 관리
1        .0        .7
major   minor     patch(간단 버그 수정)
^ : minor 버전까지만 설치하거나 업데이트한다. : npm update [패키지명]

1.x.x 1.0.0 에서 2.0.0 미만 버전 설치하거나 업데이트 가능

~: patch버전만 설치하거나 업데이트

"express": "~4.17.1" ===> 4.17.x 가능
                          4.18.0: 안됨

>, >=, <, <=, =

* 특정버전의 패키지 설치
npm i 패키지명@버전
npm i express@4.17.1
npm i express@^4.17.1
npm i express@~4.17.1
npm i express@>4.17.1
//거의 잘 안사용한다.

npm i express@latest (최신버전,)
npm i express@x
npm i express@next(가장 최근 배포판)

npm uninstall [패키지명]
npm rm [패키지명]
npm search [검색어]





